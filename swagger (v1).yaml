swagger: "2.0"
info:
  description: "SD test server."
  version: "1.0.0"
  title: "SaberDevs VC.RU"
host: "none"
tags:
- name: "news"
  description: "news feed"
- name: "photo"
  description: "Photo storage"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"

paths:

  /login:
    post:
      tags:
      - "user"
      summary: "user login"
      description: "Вход в систему"
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user data for signing in"
        required: true
        schema:
          $ref: "#/definitions/UserLogIn"
      responses:
        "400":
          description: "Invalid username/password supplied"
        "405":
          description: "Invalid input"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserData"
          headers:
            Set-Cookie:
              type: "string"
              description: "HTTP-only cookie and time left before expire"

  /signup:
    post:
      tags:
      - "user"
      summary: "user registration"
      description: "Регистрация в системе"
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user data for signing up"
        required: true
        schema:
          $ref: "#/definitions/UserSignUp"
      responses:
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "409":
          description: "Login is already in use"
  
  
  /user/{UserLogin}:
    get:
      tags:
      - "user"
      summary: "Find user with login"
      description: "Returns a common user data"
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - name: "UserLogin"
        in: "path"
        description: "Login of user to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid login supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - name: "UserLogin"
        in: "path"
        description: "login that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UserUpdate"
      responses:
        "400":
          description: "Invalid user supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
          
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: "This can only be done by the logged in user"
      operationId: ""
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Unauthorized"
  
  /feed:
    get:
      tags:
      - "news"
      summary: "Get news chunk"
      description: ""
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - name: "idLastLoaded"
        in: "query"
        required: true
        type: "string"
        description: "start point in news feed"
      - name: "login"
        in: "query"
        required: true
        type: "string"
        description: "news for what user"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Card"
        "401":
          description: "Invalid tag value"
        "404":
          description: "Not found"
  
  /feed/findByTags:
    get:
      tags:
      - "news"
      summary: "Finds news by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: ""
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Card"
        "401":
          description: "Invalid tag value"
        "404":
          description: "Not found"

securityDefinitions:

  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
    
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
    
definitions:

  User:
    type: "object"
    properties:
      login:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      score:
        type: "integer"
        format: "int64"
        description: "Popularity rating"
  
  UserSignUp:
    type: "object"
    properties:
      login:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        
  UserUpdate:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        
  UserLogIn:
    type: "object"
    properties:
      login:
        type: "string"
      password:
        type: "string"
        
  UserData:
    type: "object"
    properties:
      login:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      score:
        type: "integer"
        format: "int64"
        description: "Popularity rating"

  Tag:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
    
        
  Card:
    type: "object"
    properties:
      id:
        type: "string"
      previewUrl:
        type: "string"
      title:
        type: "string"
      text:
        type: "string"
      authorLogin:
        type: "string"
      comments:
        type: "integer"
        format: "int64"
        description: "Number of comments"
      likes:
        type: "integer"
        format: "int64"
        description: "Popularity rating"
      tags:
        type: "array"
        items:
          type: "string"
      
  ApiResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int64"
      data:
        type: "object"
      msg:
        type: "string"

externalDocs:
  description: "Find out more about project"
  url: "https://github.com/frontend-park-mail-ru/2021_2_SaberDevs/tree/dev"